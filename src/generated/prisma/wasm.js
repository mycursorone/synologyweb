
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  cover_image: 'cover_image',
  spec_pdf_url: 'spec_pdf_url',
  is_active: 'is_active',
  description_i18n: 'description_i18n',
  software_space: 'software_space',
  hardware_space: 'hardware_space',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Product_tagsScalarFieldEnum = {
  product_id: 'product_id',
  tag_id: 'tag_id',
  product_name: 'product_name',
  tag_spec: 'tag_spec',
  tag_size: 'tag_size'
};

exports.Prisma.Products_hardwareScalarFieldEnum = {
  id: 'id',
  products_id: 'products_id',
  controller_count: 'controller_count',
  cpu_model: 'cpu_model',
  cpu_count: 'cpu_count',
  cpu_cores: 'cpu_cores',
  cpu_architecture: 'cpu_architecture',
  cpu_base_clock: 'cpu_base_clock',
  cpu_turbo_clock: 'cpu_turbo_clock',
  hardware_encryption: 'hardware_encryption',
  memory_total: 'memory_total',
  memory_installed: 'memory_installed',
  memory_slots: 'memory_slots',
  memory_max: 'memory_max',
  disk_bays: 'disk_bays',
  disk_bays_max: 'disk_bays_max',
  disk_types_supported: 'disk_types_supported',
  m2_slot: 'm2_slot',
  disk_host_swappable: 'disk_host_swappable',
  lan_rj45_1G: 'lan_rj45_1G',
  lan_rj45_2_5G: 'lan_rj45_2_5G',
  lan_rj45_10G: 'lan_rj45_10G',
  management_prot: 'management_prot',
  max_lax_ports: 'max_lax_ports',
  usb_3_2_prots: 'usb_3_2_prots',
  expansion_ports: 'expansion_ports',
  expansion_port_types: 'expansion_port_types',
  pcie_expansion: 'pcie_expansion',
  chassis_type: 'chassis_type',
  dimensions: 'dimensions',
  rack_mount_kit: 'rack_mount_kit',
  fan_size: 'fan_size',
  fan_replaceable: 'fan_replaceable',
  led_brightness_adj: 'led_brightness_adj',
  auto_power_recovery: 'auto_power_recovery',
  noise_lenel: 'noise_lenel',
  scheduled_power: 'scheduled_power',
  wake_on_lan: 'wake_on_lan',
  dual_power_supply: 'dual_power_supply',
  ac_input_voltage: 'ac_input_voltage',
  frequency: 'frequency',
  power_consumption: 'power_consumption',
  working_temperature: 'working_temperature',
  storage_temperature: 'storage_temperature',
  relative_humidity: 'relative_humidity',
  certifications: 'certifications',
  warranty: 'warranty',
  environmental_compliance: 'environmental_compliance',
  package_contents: 'package_contents',
  optional_accessories: 'optional_accessories',
  cpu_threads: 'cpu_threads'
};

exports.Prisma.Tag_categoriesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  sort: 'sort',
  categories_type: 'categories_type'
};

exports.Prisma.TagsScalarFieldEnum = {
  id: 'id',
  created_id: 'created_id',
  product_spec: 'product_spec',
  product_size: 'product_size',
  sort_type: 'sort_type',
  sort_order: 'sort_order',
  spec_size: 'spec_size'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FooterScalarFieldEnum = {
  id: 'id',
  icpNumber: 'icpNumber',
  icpLink: 'icpLink',
  copyright: 'copyright',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FooterLinkScalarFieldEnum = {
  id: 'id',
  title: 'title',
  url: 'url',
  category: 'category',
  icon: 'icon',
  sortOrder: 'sortOrder',
  isActive: 'isActive',
  footerId: 'footerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Product: 'Product',
  product_tags: 'product_tags',
  products_hardware: 'products_hardware',
  tag_categories: 'tag_categories',
  tags: 'tags',
  User: 'User',
  Footer: 'Footer',
  FooterLink: 'FooterLink'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
