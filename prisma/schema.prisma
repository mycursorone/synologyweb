generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String              @default("")
  description       String?
  cover_image       String?
  spec_pdf_url      String?
  is_active         Boolean             @default(true)
  description_i18n  Json?
  software_space    Json?
  hardware_space    Json?
  createdAt         DateTime?           @default(now()) @map("created_at") @db.Time(6)
  updatedAt         DateTime?           @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  product_tags      product_tags[]
  products_hardware products_hardware[]

  @@map("products")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model product_tags {
  product_id   String  @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tag_id       String  @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  product_name String? @default("null")
  tag_spec     String? @default("null")
  tag_size     String? @default("null")
  products     Product @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tags         tags    @relation(fields: [tag_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([product_id, tag_id])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model products_hardware {
  id                       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  products_id              String   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  controller_count         Int?     @db.SmallInt
  cpu_model                String?  @db.VarChar
  cpu_count                Int?     @db.SmallInt
  cpu_cores                Int?     @db.SmallInt
  cpu_architecture         String?  @db.VarChar
  cpu_base_clock           Decimal? @db.Decimal
  cpu_turbo_clock          Decimal? @db.Decimal
  hardware_encryption      String?  @db.VarChar
  memory_total             String?  @db.VarChar
  memory_installed         String?  @db.VarChar
  memory_slots             Int?     @db.SmallInt
  memory_max               Json?
  disk_bays                Int?     @db.SmallInt
  disk_bays_max            Int?     @db.SmallInt
  disk_types_supported     Json?
  m2_slot                  Boolean?
  disk_host_swappable      Boolean?
  lan_rj45_1G              Int?     @db.SmallInt
  lan_rj45_2_5G            Int?     @map("lan_rj45-2.5G") @db.SmallInt
  lan_rj45_10G             Int?     @db.SmallInt
  management_prot          Boolean?
  max_lax_ports            Int?     @db.SmallInt
  usb_3_2_prots            Int?     @map("usb_3.2_prots") @db.SmallInt
  expansion_ports          Int?     @db.SmallInt
  expansion_port_types     String?  @db.VarChar
  pcie_expansion           String?  @db.VarChar
  chassis_type             String?  @db.VarChar
  dimensions               String?  @db.VarChar
  rack_mount_kit           String?  @db.VarChar
  fan_size                 String?  @db.VarChar
  fan_replaceable          Boolean?
  led_brightness_adj       Boolean?
  auto_power_recovery      Boolean?
  noise_lenel              String?  @db.VarChar
  scheduled_power          Boolean?
  wake_on_lan              Boolean?
  dual_power_supply        Boolean?
  ac_input_voltage         String?  @db.VarChar
  frequency                String?  @db.VarChar
  power_consumption        String?  @db.VarChar
  working_temperature      String?  @db.VarChar
  storage_temperature      String?  @db.VarChar
  relative_humidity        String?  @db.VarChar
  certifications           Json?
  warranty                 String?  @db.VarChar
  environmental_compliance String?  @db.VarChar
  package_contents         Json?
  optional_accessories     Json?
  cpu_threads              Int?     @db.SmallInt
  products                 Product  @relation(fields: [products_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model tag_categories {
  id              String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  sort            Int?    @db.SmallInt
  categories_type String?
  tags            tags[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model tags {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_id     String         @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  product_spec   String?
  product_size   String?
  sort_type      Int?           @db.SmallInt
  sort_order     Int?           @db.SmallInt
  spec_size      String?
  product_tags   product_tags[]
  tag_categories tag_categories @relation(fields: [created_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model User {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String    @unique
  password  String
  name      String
  role      String    @default("user")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("users")
}

model Footer {
  id         String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  icpNumber  String?       @map("icp_number")
  icpLink    String?       @map("icp_link")
  copyright  String?
  isActive   Boolean       @default(true) @map("is_active")
  createdAt  DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  links      FooterLink[]

  @@map("footers")
}

model FooterLink {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title      String
  url        String
  category   String
  icon       String?
  sortOrder  Int       @default(0) @map("sort_order")
  isActive   Boolean   @default(true) @map("is_active")
  footerId   String    @map("footer_id") @db.Uuid
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  footer     Footer    @relation(fields: [footerId], references: [id], onDelete: Cascade)

  @@map("footer_links")
}
